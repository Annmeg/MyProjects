//Return the lexicographically smallest subsequence of text that contains all the distinct characters of text exactly once.
//Input: "cdadabcc"
//Output: "adbc"

string smallestSubsequence(string text) {
        unordered_map<char,int> m;
        for(auto a : text) m[a]++;
        stack<char> st;
        set<char> seen;
        int i = 0;
        while(i < text.size()){
            char c = text[i++];
            m[c]--;
            if(seen.find(c)!=seen.end()){
                continue;
            }
            while(!st.empty()&& st.top()-'a' > c-'a'){
                 if(m[st.top()]>=1){
                    seen.erase(st.top());
                    st.pop();
                 }else
                     break;
            }
            seen.insert(c);
            st.push(c);
        }
        string res;
        while(!st.empty()){
            res=st.top()+res;
            st.pop();
        }
        return res;
    }


/*
Problem:
Given an array A, we can perform a pancake flip: 
We choose some positive integer k <= A.length, then reverse the order of the first k elements of A. 
We want to perform zero or more pancake flips (doing them one after another in succession) to sort the array A.
Return the k-values corresponding to a sequence of pancake flips that sort A.  
Any valid answer that sorts the array within 10 * A.length flips will be judged as correct.
Solution:
1. find max element index
2. if index is 0 reverse whole string
3. if it is the current last element of array pop last element
4. else reverse string from 0 to index
5. once array is empty stop
*/
class PancakeSorting:
{
private:
     int maxi(vector<int>& a){
        int maxe=INT_MIN;
        int idx = -1;
        for(int i =0; i < a.size(); i++){
            int e = a[i];
            if(e > maxe){
                maxe=e;
                idx=i;
            }
        }
        return idx;
    }
public:
    vector<int> pancakeSort(vector<int>& a) {
        vector<int> res;
        while(!a.empty()){
            int i = maxi(a);
            if(i==a.size()-1){
                a.pop_back();
            } else if (i==0) {
                res.push_back(a.size());
                reverse(a.begin(),a.end());
            } else {
                res.push_back(i+1);
                reverse(a.begin(),a.begin()+i+1);
            }
        }
        return res;
    } 
 };


/*
Problem:
Given a 2-dimensional grid of integers, each value in the grid represents the color of the grid square at that location.
Two squares belong to the same connected component if and only if they have the same color and are next to each other in any 
of the 4 directions.
The border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to
a square not in the component, or on the boundary of the grid (the first or last row or column).

Given a square at location (r0, c0) in the grid and a color, color the border of the connected component of that square with the given color, and return the final grid
class ColoringBorder {
public:
    vector<vector<int>> colorBorder(vector<vector<int>>& a, int r0, int c0, int col) {
        queue<pair<int,int>> q;
        q.push({r0,c0});
        set<pair<int,int>> visited;
        int cur = a[r0][c0];
        while(!q.empty()){
            auto x = q.front();
            q.pop();
            if(!visited.insert(x).second)
                continue;
            int i = x.first,j=x.second;
            if(i < 0 || j < 0 || i >= a.size() || j >= a[0].size())
                continue;
            if(i==0 || i== a.size()-1 || j==0 ||j == a[0].size()-1){
                a[i][j]=-cur;
            }
            else if(abs(a[i-1][j])!=cur || abs(a[i+1][j])!=cur 
                   || abs(a[i][j-1])!=cur || abs(a[i][j+1])!=cur)
            {
                a[i][j]=-cur;
            }
            if(i > 0 && a[i-1][j]==cur)
                q.push({i-1,j});
            if(j > 0 && a[i][j-1]==cur)
                q.push({i,j-1});
            if(i < a.size()-1 && a[i+1][j]==cur)
                q.push({i+1,j});
            if(j < a[i].size()-1 && a[i][j+1]==cur)
                q.push({i,j+1});
        }
        for(int i = 0; i < a.size(); i++){
            for(int j = 0; j < a[i].size(); j++){
                if(a[i][j]==-cur)
                    a[i][j]=col;
            }
        }
        return a;
    }
};
